// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class SearchBarTestRedoTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void searchBarTestRedo() {
    // Test name: searchBarTestRedo
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8081/");
    // 2 | setWindowSize | 1552x840 | 
    driver.manage().window().setSize(new Dimension(1552, 840));
    // 3 | click | id=city | 
    driver.findElement(By.id("city")).click();
    // 4 | type | id=city | Paris
    driver.findElement(By.id("city")).sendKeys("Paris");
    // 5 | click | id=getCityInfo | 
    driver.findElement(By.id("getCityInfo")).click();
    // 6 | click | css=.card-header | 
    driver.findElement(By.cssSelector(".card-header")).click();
    // 7 | assertText | css=.card-header | Paris
    assertThat(driver.findElement(By.cssSelector(".card-header")).getText(), is("Paris"));
    // 8 | click | css=.card-title:nth-child(1) | 
    driver.findElement(By.cssSelector(".card-title:nth-child(1)")).click();
    // 9 | assertText | css=.card-title:nth-child(1) | Date: 2021-05-13
    assertThat(driver.findElement(By.cssSelector(".card-title:nth-child(1)")).getText(), is("Date: 2021-05-13"));
    // 10 | click | css=.card-title:nth-child(3) | 
    driver.findElement(By.cssSelector(".card-title:nth-child(3)")).click();
    // 11 | assertText | css=.card-title:nth-child(3) | Latitude: 48.86
    assertThat(driver.findElement(By.cssSelector(".card-title:nth-child(3)")).getText(), is("Latitude: 48.86"));
    // 12 | click | css=.card-title:nth-child(4) | 
    driver.findElement(By.cssSelector(".card-title:nth-child(4)")).click();
    // 13 | click | css=.card-title:nth-child(4) | 
    driver.findElement(By.cssSelector(".card-title:nth-child(4)")).click();
    // 14 | click | css=.card-title:nth-child(4) | 
    driver.findElement(By.cssSelector(".card-title:nth-child(4)")).click();
    // 15 | click | css=.card-title:nth-child(4) | 
    driver.findElement(By.cssSelector(".card-title:nth-child(4)")).click();
    // 16 | assertText | css=.card-title:nth-child(4) | Longitude: 2.35
    assertThat(driver.findElement(By.cssSelector(".card-title:nth-child(4)")).getText(), is("Longitude: 2.35"));
    // 17 | click | id=city | 
    driver.findElement(By.id("city")).click();
    // 18 | type | id=city | Paris
    driver.findElement(By.id("city")).sendKeys("Paris");
    // 19 | click | css=.btn:nth-child(4) | 
    driver.findElement(By.cssSelector(".btn:nth-child(4)")).click();
    // 20 | click | css=.fas | 
    driver.findElement(By.cssSelector(".fas")).click();
    // 21 | click | css=.card-header | 
    driver.findElement(By.cssSelector(".card-header")).click();
    // 22 | assertText | css=.card-header | Paris
    assertThat(driver.findElement(By.cssSelector(".card-header")).getText(), is("Paris"));
    // 23 | click | id=city | 
    driver.findElement(By.id("city")).click();
    // 24 | type | id=city | blablabla
    driver.findElement(By.id("city")).sendKeys("blablabla");
    // 25 | click | css=.fas | 
    driver.findElement(By.cssSelector(".fas")).click();
    // 26 | click | id=searchbox_err | 
    driver.findElement(By.id("searchbox_err")).click();
    // 27 | assertText | id=searchbox_err | City not found.
    assertThat(driver.findElement(By.id("searchbox_err")).getText(), is("City not found."));
  }
}
